---
pagetitle: "Open-source interactive self-paced R learning website"
author: "Danyang Dai"
date: "15th of Decemeber"
host: "OZCOST 2023"
institute: "University of Queensland"
strip-comments: true
format: 
  revealjs:
    logo: images/logos.jpeg
    slide-number: true
    incremental: true
    multiplex: true
    theme: assets/rladies.scss
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    css: [assets/custom.css, assets/tachyons-addon.css]
    include-after: |
      <link rel="stylesheet" href="assets/syntax-highlight.css">
      <link rel="stylesheet" href="assets/fontawesome-free-6.1.1-web/css/all.min.css">
      <script src="assets/fontawesome-free-6.1.1-web/js/all.min.js"></script>
callout-icon: false
execute:
  echo: true
filters:
   - roughnotation
---

##  {#title-slide background="images/bg_titlepage.jpeg" background-size="100%"}

```{r setup, include = FALSE}
#library(tidyverse)
library(emo)

rotating_text <- function(x, align = "center") {
  glue::glue('
<div style="overflow: hidden; height: 1.2em;">
<ul class="content__container__list {align}" style="text-align: {align}">
<li class="content__container__list__item">{x[1]}</li>
<li class="content__container__list__item">{x[2]}</li>
<li class="content__container__list__item">{x[3]}</li>
<li class="content__container__list__item">{x[4]}</li>
</ul>
</div>')
}

fa_list <- function(x, incremental = FALSE) {
  icons <- names(x)
  fragment <- ifelse(incremental, "fragment", "")
  items <- glue::glue('<li class="{fragment}"><span class="fa-li"><i class="{icons}"></i></span> {x}</li>')
  paste('<ul class="fa-ul">', 
        paste(items, collapse = "\n"),
        "</ul>", sep = "\n")
}


detach_package <- function(pkg, character.only = FALSE)
{
  if(!character.only)
  {
    pkg <- deparse(substitute(pkg))
  }
  search_item <- paste("package", pkg, sep = ":")
  while(search_item %in% search())
  {
    detach(search_item, unload = TRUE, character.only = TRUE)
  }
}
```

::: title-box
<h2>`r rmarkdown::metadata$pagetitle`</h2>

üë©üèª‚Äçüíª [`r rmarkdown::metadata$author` \@ `r rmarkdown::metadata$institute`]{.author}

`r rotating_text(c("Mitchell O'Hara-Wild @ Monash University", "<i class='fas fa-envelope'></i> danyang.dai@uq.edu.au", 'Emi Tanaka @ Australia National University', "<i class='fas fa-globe'></i> https://dai.netlify.app/"))`
:::

<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

::: {.absolute .top-0 .rladies-purple .w-100 .font-small}
[`r rmarkdown::metadata$date`]{.rladies-purple} [`r rmarkdown::metadata$host`]{.rladies-purple}
:::

::: notes
Hello everybody. Thank you for coming today. I am a first year PhD student at the University of Queensland in the faculty of Medicine. Before I joined UQ, I was working at Monash in the department of Econometrics and Business Statistics and public health department. This body of work is driven by my working experience as statistics and econometrics tutor along with my colleagues Emi Tanaka and Mitchell O'Hara-Wild.
:::

## [Acknowledgement of Country]{auto-animate="true"}

::: columns
::: {.column width="50%"}
<br><br>
<p style="text-align: center;">I acknowledge the Traditional Owners and their custodianship of the lands on which we meet.  
We pay our respects to their Ancestors and their descendants, who continue cultural and spiritual connections to Country.</p>
:::

::: {.column width="50%"}
![](images/ack_cou.jpg){fig-align="center"}

:::

:::

## [Has this happened to you before?]{auto-animate="true"}

Ideally, we would like to teach students read in a dataset and have a look at the structure of the data.

```{r, eval = TRUE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
str(crabs)
```


## [Has this happened to you before?]{auto-animate=true}

<br><br>


::: {.fragment .fade-in}

```{r, echo = TRUE, eval=FALSE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
str(carbs)
```

```{r, eval = TRUE,echo=FALSE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
try(str(carbs))
```
:::


## [Has this happened to you before?]{auto-animate=true}

<br><br>

::: {.fragment.fade-in}

```{r, echo = TRUE, eval=FALSE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
```

```{r, eval = TRUE,echo=FALSE}
try(read_csv("data/australian crabs.csv"))
```
:::



## [Has this happened to you before?]{auto-animate=true}

<br><br>


::: {.fragment.fade-in}

```{r, echo = TRUE, eval=FALSE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
```

```{r, eval = TRUE,echo=FALSE}
detach_package(tidyverse)
detach_package(readr)
try(read_csv("data/australian-crabs.csv"))
```

- [And many more unexpected [errors]{style="color: red;"}!]{.rn rn-type=underline rn-color=red}

:::



::: notes
I am sure many of the statistics and data sciences educators had experienced something similar before. When teaching first year data analysis and statistics units, we sometime unwillingly spent way too much time helping students with their coding problems and sometime even just installation issues. These precious time were taken away from actual courses materials delivering. The current mode of teaching requires tutors to come to every students and help them with their individual bugs. If we are lucky, there will be some students who can help each other out.
:::

------------------------------------------------------------------------

<br>

```{=html}
<p class = "big", style="text-align: center;"><span style="color: red;"> errors</span></p>
```
<br>

```{=html}
<p class = "big", style="text-align: center;">`r emo::ji("angry")``r emo::ji("explode")` `r emo::ji("exclamation")`</p>
```
::: notes
As the statistical concepts are the central focus of the subject, during lectures and tutorials, we normally present an error-free code in classroom. We just cannot afford to spend too much time teaching students how to debug. Students tend to get frustrated when they in encounter error messages.

So how should we manage this in education?
:::

------------------------------------------------------------------------

## [It is ok to make mistakes]{auto-animate="true"}

::: fragment
-   "Great teachers make it safe to be wrong. They build a [Culture of Error that respects, normalizes,and values learning from errors.]{.rn rn-type=highlight}" by Doug Lemov and Norman Atkins from Teach Like a Champion 2.0.

-   Studies[^1] have suggested that students [learn more]{.rn rn-type=highlight} during debug session compared to error-free lecture.
:::

[^1]: Dalbey, J., and Linn, M. (1985),Deek, F. P., and McHugh, J. A. (1998), Hoffman & Angelo F. Elmi (2021)

::: notes
From the book Teach like a Champion, it tells us that educators should make students to feel comfortable of making mistakes. And that includes normalizing error codes.

This valuable lesson of debugging wasn't incorporated in our daily teaching. Even when the lectures and tutorials are all being delivered in an error-free way. We have carefully designed the materials and we made sure that there isn't any errors within our materials.

However, as much as we want it to be an error free environment, it cannot be true. As shown before, students would always encounter some error codes.
:::

## [Understanding error code]{auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo = TRUE, eval=FALSE}
library(tidyverse)
str(carbs)
```

```{r, eval = TRUE,echo=FALSE}
try(str(carbs))
```


<br>


```{r, echo = TRUE, eval=FALSE}
library(tidyverse)
crabs <- read_csv("data/australian-crabs.csv") 
```

```{r, eval = TRUE,echo=FALSE}
detach_package(tidyverse)
detach_package(readr)
try(read_csv("data/australian-crabs.csv"))
```

<br>


```{r, echo = TRUE, eval=FALSE}
crabs %>% 
  mutate(female = ifelse(sex == "Famle",1,0)))
```

```{r, eval = TRUE,echo=FALSE,error=TRUE}
print(try(crabs %>% 
  mutate(female = ifelse(sex == "Famle",1,0)))))
```

:::


::: {.column width="50%"}
::: fragment
-   Check spelling
-   Syntax missing `(` or `)` or `{` or `}` etc.
-   Loading required packages
-   Search and Google the messages
-   Turn it on and off again `r emo::ji("angel")`
:::
:::
:::

::: notes
There are some basic self-checking techniques that we can teach students to help themselves. For example, it would be simple typos somewhere in your function or the path you supplied. Another common mistakes is syntax errors. This sometime can be easy and difficult to spot depending on how long your function is. A common on that I sometime make is using pips for ggplot where it should be plus sign. If it comes to a relatively complex question, goggling is the next step we recommend students to do.
:::

## [It is okay to ask question, but where `r emo::ji("confused")`]{auto-animate="true"}

::: fragment
-   Unit's learning mangement platform (e.g. Moodle) page
-   [Stack Overflow](https://stackoverflow.com/questions/tagged/rstudio)
-   [Posit Community](https://community.rstudio.com)
-   [Github Issues](https://github.com)

::: notes
In additional on encouraging students to debug themselves, we also recommend students to help each other out by posting their questions on Moodle pages. This is also a good practice for students to normalizing making mistakes. When you see other people having the same problem, you know that you are not the only one. You are all in this together. Students will also be able to build their knowledge sets and confident by helping others out. There are other public channels where you can seek for help such us Stack Overflow, Posit Community and Github issues if you have any specific questions that you want to direct it to the package authors.
:::
:::

## [It is okay to ask question, but how `r emo::ji("confused")`]{auto-animate="true"}

::: columns
::: {.column width="30%"}
::: fragment
### [[QUESTION]{style="color: red;"}]{.rn rn-type=crossed-off rn-color=red}
:::
:::

::: {.column width="70%"}
::: fragment
### [Minimal reproducible examples]{.rn rn-type=circle rn-color=blue}

-   Does your error relate to dataset? Provide minimal datasets

-   Provide minimal code (not just a screenshot)

-   Provide session information using `sessioninfo::session_info()`

-   Using the `reprex` package for producing examples
:::
:::
:::

::: notes
As a tutor, one big part of my job is to answer students' questions on Moodle pages. And I do get email notifications with their questions.

I often see this heading: Question. This type of heading I found to be meaning less. When you post on the question page, of course I know it is a question. And when I click into the question, there is normally a screenshot of the error code and then asking why and how to fix it.

This sometimes become frustrated for me because I need to explain that I couldn't really help you with just a screenshot of your error messages or just error codes. I need more information to understand this problem. After many times of this, we decide that it is important for students to understand minimal reproducible examples.

This is an efficient way to help students learning how to debug. During the process of creating this minimal reproducible examples, sometime the problem fix themselves. It also improved the communication between students and tutors. Instead of going back and forth on what is the problem, we are able to understand the problem and provide solutions.

This way, we are also preparing our students for their future study and work. Because they are not only posting their questions at Moodle but also on public channels such us Stack Overflows. Learning how to do create minimal reproducible examples is an transferable skills for working at pip lines where you need to be able to clearly states what is the problem.
:::

## [Saving more time in classroom]{auto-animate="true"}

::: fragment
```{=html}
<iframe width="1000" height="500" src="https://learnr.numbat.space/chapter3#4" title="Minimal reproducibke examples"></iframe>
```
:::

::: notes
All the procedures mentioned above have been packaged up into our LearnR website.
:::

## [More to LearnR website]{auto-animate="true"}

::: fragment
```{=html}
<iframe width="1000" height="500" src="https://learnr.numbat.space" title="LearnR"></iframe>
```
:::

::: fragment
<i class='fas fa-globe'></i> <https://learnr.numbat.space>
:::

::: notes
This is an interactive introduction to data analysis with R. There are 9 chapters ordered from teaching students who to install R and RStudio to more advanced R programming skills such as data visualization and regressions.

This project aims to help students with no programming experience to learn how to use RStudio at their own time and at their own pace.
:::

## [Did it work?]{auto-animate="true"}

![](images/numberofusers.jpg)

## 

![](images/engagement.jpg)

## 

![](images/ratings.jpg)

::: notes
We have encouraged units coordinator to use our LearnR websites during orientation week where students can get a head start on R basics. We can see a decline of users toward the end of the semester. This is align with what we expected. The demand of LearnR websites is high for students at the start of the semester where we expect them to use it for self-learning. Where later in the semester, they are less depended on LearnR website. The amount of time that they spend on learnR is the amount of time that tutors saved in classroom teaching the basics of R.

With the survey we sent out to students for feedback, we got 8 out of 10 for satisfaction on the effectiveness of this resources. We have a low rating here, but it turns out that when we read the comment, it wasn't about the LearnR website but about their course.
:::

##  {auto-animate="true"}

![](images/bg_titlepage.jpeg)

::: notes
We want to teach students the skills sets of being able to learn beyond the coursework. So they can continue learning for a life time.

We provide an online learning tool that include a chapter about equipping students with how to ask for help and troubleshoot.
:::

## [Acknowledgement]{auto-animate="true"}

<br>
<p style="text-align: center;">

Dr. Emi Tanaka `r emo::ji("e-mail")` [emi.tanaka@anu.edu.au](emi.tanaka@anu.edu.au)

</p>

<br>
<p style="text-align: center;">

Mitchell O'Hara-Wild `r emo::ji("e-mail")` [mitch.ohara-wild@monash.edu.au](mitch.ohara-wild@monash.edu.au)


</p>

<br>

<p style="text-align: center;">

Dr. Jessica Leung `r emo::ji("e-mail")` [Jessica.Leung@monash.edu](Jessica.Leung@monash.edu)

</p>

::: {layout="[70,20]"}

![](images/logos.jpeg)

![](images/ssa.png)
:::


------------------------------------------------------------------------



## [Resources and future work]{auto-animate="true"}

`r fa_list(c("fa-brands fa-slideshare" = "danyangdai.github.io/LearnR_OZCOTS_2023_presentation/","fa-brands fa-github" = "github.com/DanyangDai/LearnR_OZCOTS_2023_presentation","fa-solid fa-globe" = "learnr.numbat.space","fa-solid fa-code-branch" = "Collaborate at: github.com/numbats/learnr"))`

Danyang Dai `r emo::ji("e-mail")` [danyang.dai@uq.edu.au](dayang.dai@uq.edu.au)

Dr. Emi Tanaka `r emo::ji("e-mail")` [emi.tanaka@anu.edu.au](emi.tanaka@anu.edu.au)

Mitchell O'Hara-Wild `r emo::ji("e-mail")` [mitch.ohara-wild@monash.edu.au](mitch.ohara-wild@monash.edu.au)



